// Code generated by "enumer -type=SubClassKeyboard -json -transform=snake -trimprefix SubClassKeyboard -output=./hardware_enum_sub_class_keyboard.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SubClassKeyboardName = "kbdconsole"

var _SubClassKeyboardIndex = [...]uint8{0, 3, 10}

const _SubClassKeyboardLowerName = "kbdconsole"

func (i SubClassKeyboard) String() string {
	if i >= SubClassKeyboard(len(_SubClassKeyboardIndex)-1) {
		return fmt.Sprintf("SubClassKeyboard(%d)", i)
	}
	return _SubClassKeyboardName[_SubClassKeyboardIndex[i]:_SubClassKeyboardIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SubClassKeyboardNoOp() {
	var x [1]struct{}
	_ = x[SubClassKeyboardKbd-(0)]
	_ = x[SubClassKeyboardConsole-(1)]
}

var _SubClassKeyboardValues = []SubClassKeyboard{SubClassKeyboardKbd, SubClassKeyboardConsole}

var _SubClassKeyboardNameToValueMap = map[string]SubClassKeyboard{
	_SubClassKeyboardName[0:3]:       SubClassKeyboardKbd,
	_SubClassKeyboardLowerName[0:3]:  SubClassKeyboardKbd,
	_SubClassKeyboardName[3:10]:      SubClassKeyboardConsole,
	_SubClassKeyboardLowerName[3:10]: SubClassKeyboardConsole,
}

var _SubClassKeyboardNames = []string{
	_SubClassKeyboardName[0:3],
	_SubClassKeyboardName[3:10],
}

// SubClassKeyboardString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubClassKeyboardString(s string) (SubClassKeyboard, error) {
	if val, ok := _SubClassKeyboardNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SubClassKeyboardNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SubClassKeyboard values", s)
}

// SubClassKeyboardValues returns all values of the enum
func SubClassKeyboardValues() []SubClassKeyboard {
	return _SubClassKeyboardValues
}

// SubClassKeyboardStrings returns a slice of all String values of the enum
func SubClassKeyboardStrings() []string {
	strs := make([]string, len(_SubClassKeyboardNames))
	copy(strs, _SubClassKeyboardNames)
	return strs
}

// IsASubClassKeyboard returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SubClassKeyboard) IsASubClassKeyboard() bool {
	for _, v := range _SubClassKeyboardValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SubClassKeyboard
func (i SubClassKeyboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubClassKeyboard
func (i *SubClassKeyboard) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubClassKeyboard should be a string, got %s", data)
	}

	var err error
	*i, err = SubClassKeyboardString(s)
	return err
}
