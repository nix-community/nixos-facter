// Code generated by "enumer -type=IDTag -json -transform=snake -trimprefix IDTag -output=./id_tag_enum.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _IDTagName = "pcieisausbspecialpcmciasdio"

var _IDTagIndex = [...]uint8{0, 3, 7, 10, 17, 23, 27}

const _IDTagLowerName = "pcieisausbspecialpcmciasdio"

func (i IDTag) String() string {
	i -= 1
	if i >= IDTag(len(_IDTagIndex)-1) {
		return fmt.Sprintf("IDTag(%d)", i+1)
	}
	return _IDTagName[_IDTagIndex[i]:_IDTagIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IDTagNoOp() {
	var x [1]struct{}
	_ = x[IDTagPci-(1)]
	_ = x[IDTagEisa-(2)]
	_ = x[IDTagUsb-(3)]
	_ = x[IDTagSpecial-(4)]
	_ = x[IDTagPcmcia-(5)]
	_ = x[IDTagSdio-(6)]
}

var _IDTagValues = []IDTag{IDTagPci, IDTagEisa, IDTagUsb, IDTagSpecial, IDTagPcmcia, IDTagSdio}

var _IDTagNameToValueMap = map[string]IDTag{
	_IDTagName[0:3]:        IDTagPci,
	_IDTagLowerName[0:3]:   IDTagPci,
	_IDTagName[3:7]:        IDTagEisa,
	_IDTagLowerName[3:7]:   IDTagEisa,
	_IDTagName[7:10]:       IDTagUsb,
	_IDTagLowerName[7:10]:  IDTagUsb,
	_IDTagName[10:17]:      IDTagSpecial,
	_IDTagLowerName[10:17]: IDTagSpecial,
	_IDTagName[17:23]:      IDTagPcmcia,
	_IDTagLowerName[17:23]: IDTagPcmcia,
	_IDTagName[23:27]:      IDTagSdio,
	_IDTagLowerName[23:27]: IDTagSdio,
}

var _IDTagNames = []string{
	_IDTagName[0:3],
	_IDTagName[3:7],
	_IDTagName[7:10],
	_IDTagName[10:17],
	_IDTagName[17:23],
	_IDTagName[23:27],
}

// IDTagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IDTagString(s string) (IDTag, error) {
	if val, ok := _IDTagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IDTagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IDTag values", s)
}

// IDTagValues returns all values of the enum
func IDTagValues() []IDTag {
	return _IDTagValues
}

// IDTagStrings returns a slice of all String values of the enum
func IDTagStrings() []string {
	strs := make([]string, len(_IDTagNames))
	copy(strs, _IDTagNames)
	return strs
}

// IsAIDTag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IDTag) IsAIDTag() bool {
	for _, v := range _IDTagValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IDTag
func (i IDTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IDTag
func (i *IDTag) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IDTag should be a string, got %s", data)
	}

	var err error
	*i, err = IDTagString(s)
	return err
}
