// Code generated by "enumer -type=SubClassMouse -json -transform=snake -trimprefix SubClassMouse -output=./hardware_enum_sub_class_mouse.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_SubClassMouseName_0      = "ps2serbususbsun"
	_SubClassMouseLowerName_0 = "ps2serbususbsun"
	_SubClassMouseName_1      = "other"
	_SubClassMouseLowerName_1 = "other"
)

var (
	_SubClassMouseIndex_0 = [...]uint8{0, 3, 6, 9, 12, 15}
	_SubClassMouseIndex_1 = [...]uint8{0, 5}
)

func (i SubClassMouse) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _SubClassMouseName_0[_SubClassMouseIndex_0[i]:_SubClassMouseIndex_0[i+1]]
	case i == 128:
		return _SubClassMouseName_1
	default:
		return fmt.Sprintf("SubClassMouse(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SubClassMouseNoOp() {
	var x [1]struct{}
	_ = x[SubClassMousePs2-(0)]
	_ = x[SubClassMouseSer-(1)]
	_ = x[SubClassMouseBus-(2)]
	_ = x[SubClassMouseUsb-(3)]
	_ = x[SubClassMouseSun-(4)]
	_ = x[SubClassMouseOther-(128)]
}

var _SubClassMouseValues = []SubClassMouse{SubClassMousePs2, SubClassMouseSer, SubClassMouseBus, SubClassMouseUsb, SubClassMouseSun, SubClassMouseOther}

var _SubClassMouseNameToValueMap = map[string]SubClassMouse{
	_SubClassMouseName_0[0:3]:        SubClassMousePs2,
	_SubClassMouseLowerName_0[0:3]:   SubClassMousePs2,
	_SubClassMouseName_0[3:6]:        SubClassMouseSer,
	_SubClassMouseLowerName_0[3:6]:   SubClassMouseSer,
	_SubClassMouseName_0[6:9]:        SubClassMouseBus,
	_SubClassMouseLowerName_0[6:9]:   SubClassMouseBus,
	_SubClassMouseName_0[9:12]:       SubClassMouseUsb,
	_SubClassMouseLowerName_0[9:12]:  SubClassMouseUsb,
	_SubClassMouseName_0[12:15]:      SubClassMouseSun,
	_SubClassMouseLowerName_0[12:15]: SubClassMouseSun,
	_SubClassMouseName_1[0:5]:        SubClassMouseOther,
	_SubClassMouseLowerName_1[0:5]:   SubClassMouseOther,
}

var _SubClassMouseNames = []string{
	_SubClassMouseName_0[0:3],
	_SubClassMouseName_0[3:6],
	_SubClassMouseName_0[6:9],
	_SubClassMouseName_0[9:12],
	_SubClassMouseName_0[12:15],
	_SubClassMouseName_1[0:5],
}

// SubClassMouseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubClassMouseString(s string) (SubClassMouse, error) {
	if val, ok := _SubClassMouseNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SubClassMouseNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SubClassMouse values", s)
}

// SubClassMouseValues returns all values of the enum
func SubClassMouseValues() []SubClassMouse {
	return _SubClassMouseValues
}

// SubClassMouseStrings returns a slice of all String values of the enum
func SubClassMouseStrings() []string {
	strs := make([]string, len(_SubClassMouseNames))
	copy(strs, _SubClassMouseNames)
	return strs
}

// IsASubClassMouse returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SubClassMouse) IsASubClassMouse() bool {
	for _, v := range _SubClassMouseValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SubClassMouse
func (i SubClassMouse) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubClassMouse
func (i *SubClassMouse) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubClassMouse should be a string, got %s", data)
	}

	var err error
	*i, err = SubClassMouseString(s)
	return err
}
