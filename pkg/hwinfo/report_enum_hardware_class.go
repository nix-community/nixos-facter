// Code generated by "enumer -type=HardwareClass -json -transform=snake -trimprefix HardwareClass -output=./report_enum_hardware_class.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _HardwareClassName = "nonesystemcpukeyboardbraillemousejoystickprinterscannerchipcardmonitortv_cardgraphics_cardframebuffercamerasoundstorage_ctrlnetworkisdn_adaptermodemnetwork_interfacediskpartitioncdromfloppymanualusb_controllerusbbiospciisapnpbridgehubscsiidememorydvb_cardpcmciapcmcia_controllerfirewirefirewire_controllerhotplughotplug_controllerzippppoewlan_cardredasddsl_adapterblock_devicetapevesa_biosbluetoothfingerprintmmc_controllernvmeunknownall"

var _HardwareClassIndex = [...]uint16{0, 4, 10, 13, 21, 28, 33, 41, 48, 55, 63, 70, 77, 90, 101, 107, 112, 124, 131, 143, 148, 165, 169, 178, 183, 189, 195, 209, 212, 216, 219, 225, 231, 234, 238, 241, 247, 255, 261, 278, 286, 305, 312, 330, 333, 338, 347, 353, 364, 376, 380, 389, 398, 409, 423, 427, 434, 437}

const _HardwareClassLowerName = "nonesystemcpukeyboardbraillemousejoystickprinterscannerchipcardmonitortv_cardgraphics_cardframebuffercamerasoundstorage_ctrlnetworkisdn_adaptermodemnetwork_interfacediskpartitioncdromfloppymanualusb_controllerusbbiospciisapnpbridgehubscsiidememorydvb_cardpcmciapcmcia_controllerfirewirefirewire_controllerhotplughotplug_controllerzippppoewlan_cardredasddsl_adapterblock_devicetapevesa_biosbluetoothfingerprintmmc_controllernvmeunknownall"

func (i HardwareClass) String() string {
	if i >= HardwareClass(len(_HardwareClassIndex)-1) {
		return fmt.Sprintf("HardwareClass(%d)", i)
	}
	return _HardwareClassName[_HardwareClassIndex[i]:_HardwareClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HardwareClassNoOp() {
	var x [1]struct{}
	_ = x[HardwareClassNone-(0)]
	_ = x[HardwareClassSystem-(1)]
	_ = x[HardwareClassCpu-(2)]
	_ = x[HardwareClassKeyboard-(3)]
	_ = x[HardwareClassBraille-(4)]
	_ = x[HardwareClassMouse-(5)]
	_ = x[HardwareClassJoystick-(6)]
	_ = x[HardwareClassPrinter-(7)]
	_ = x[HardwareClassScanner-(8)]
	_ = x[HardwareClassChipcard-(9)]
	_ = x[HardwareClassMonitor-(10)]
	_ = x[HardwareClassTvCard-(11)]
	_ = x[HardwareClassGraphicsCard-(12)]
	_ = x[HardwareClassFramebuffer-(13)]
	_ = x[HardwareClassCamera-(14)]
	_ = x[HardwareClassSound-(15)]
	_ = x[HardwareClassStorageCtrl-(16)]
	_ = x[HardwareClassNetwork-(17)]
	_ = x[HardwareClassIsdnAdapter-(18)]
	_ = x[HardwareClassModem-(19)]
	_ = x[HardwareClassNetworkInterface-(20)]
	_ = x[HardwareClassDisk-(21)]
	_ = x[HardwareClassPartition-(22)]
	_ = x[HardwareClassCdrom-(23)]
	_ = x[HardwareClassFloppy-(24)]
	_ = x[HardwareClassManual-(25)]
	_ = x[HardwareClassUsbController-(26)]
	_ = x[HardwareClassUsb-(27)]
	_ = x[HardwareClassBios-(28)]
	_ = x[HardwareClassPci-(29)]
	_ = x[HardwareClassIsapnp-(30)]
	_ = x[HardwareClassBridge-(31)]
	_ = x[HardwareClassHub-(32)]
	_ = x[HardwareClassScsi-(33)]
	_ = x[HardwareClassIde-(34)]
	_ = x[HardwareClassMemory-(35)]
	_ = x[HardwareClassDvbCard-(36)]
	_ = x[HardwareClassPcmcia-(37)]
	_ = x[HardwareClassPcmciaController-(38)]
	_ = x[HardwareClassFirewire-(39)]
	_ = x[HardwareClassFirewireController-(40)]
	_ = x[HardwareClassHotplug-(41)]
	_ = x[HardwareClassHotplugController-(42)]
	_ = x[HardwareClassZip-(43)]
	_ = x[HardwareClassPppoe-(44)]
	_ = x[HardwareClassWlanCard-(45)]
	_ = x[HardwareClassRedasd-(46)]
	_ = x[HardwareClassDslAdapter-(47)]
	_ = x[HardwareClassBlockDevice-(48)]
	_ = x[HardwareClassTape-(49)]
	_ = x[HardwareClassVesaBios-(50)]
	_ = x[HardwareClassBluetooth-(51)]
	_ = x[HardwareClassFingerprint-(52)]
	_ = x[HardwareClassMmcController-(53)]
	_ = x[HardwareClassNvme-(54)]
	_ = x[HardwareClassUnknown-(55)]
	_ = x[HardwareClassAll-(56)]
}

var _HardwareClassValues = []HardwareClass{HardwareClassNone, HardwareClassSystem, HardwareClassCpu, HardwareClassKeyboard, HardwareClassBraille, HardwareClassMouse, HardwareClassJoystick, HardwareClassPrinter, HardwareClassScanner, HardwareClassChipcard, HardwareClassMonitor, HardwareClassTvCard, HardwareClassGraphicsCard, HardwareClassFramebuffer, HardwareClassCamera, HardwareClassSound, HardwareClassStorageCtrl, HardwareClassNetwork, HardwareClassIsdnAdapter, HardwareClassModem, HardwareClassNetworkInterface, HardwareClassDisk, HardwareClassPartition, HardwareClassCdrom, HardwareClassFloppy, HardwareClassManual, HardwareClassUsbController, HardwareClassUsb, HardwareClassBios, HardwareClassPci, HardwareClassIsapnp, HardwareClassBridge, HardwareClassHub, HardwareClassScsi, HardwareClassIde, HardwareClassMemory, HardwareClassDvbCard, HardwareClassPcmcia, HardwareClassPcmciaController, HardwareClassFirewire, HardwareClassFirewireController, HardwareClassHotplug, HardwareClassHotplugController, HardwareClassZip, HardwareClassPppoe, HardwareClassWlanCard, HardwareClassRedasd, HardwareClassDslAdapter, HardwareClassBlockDevice, HardwareClassTape, HardwareClassVesaBios, HardwareClassBluetooth, HardwareClassFingerprint, HardwareClassMmcController, HardwareClassNvme, HardwareClassUnknown, HardwareClassAll}

var _HardwareClassNameToValueMap = map[string]HardwareClass{
	_HardwareClassName[0:4]:          HardwareClassNone,
	_HardwareClassLowerName[0:4]:     HardwareClassNone,
	_HardwareClassName[4:10]:         HardwareClassSystem,
	_HardwareClassLowerName[4:10]:    HardwareClassSystem,
	_HardwareClassName[10:13]:        HardwareClassCpu,
	_HardwareClassLowerName[10:13]:   HardwareClassCpu,
	_HardwareClassName[13:21]:        HardwareClassKeyboard,
	_HardwareClassLowerName[13:21]:   HardwareClassKeyboard,
	_HardwareClassName[21:28]:        HardwareClassBraille,
	_HardwareClassLowerName[21:28]:   HardwareClassBraille,
	_HardwareClassName[28:33]:        HardwareClassMouse,
	_HardwareClassLowerName[28:33]:   HardwareClassMouse,
	_HardwareClassName[33:41]:        HardwareClassJoystick,
	_HardwareClassLowerName[33:41]:   HardwareClassJoystick,
	_HardwareClassName[41:48]:        HardwareClassPrinter,
	_HardwareClassLowerName[41:48]:   HardwareClassPrinter,
	_HardwareClassName[48:55]:        HardwareClassScanner,
	_HardwareClassLowerName[48:55]:   HardwareClassScanner,
	_HardwareClassName[55:63]:        HardwareClassChipcard,
	_HardwareClassLowerName[55:63]:   HardwareClassChipcard,
	_HardwareClassName[63:70]:        HardwareClassMonitor,
	_HardwareClassLowerName[63:70]:   HardwareClassMonitor,
	_HardwareClassName[70:77]:        HardwareClassTvCard,
	_HardwareClassLowerName[70:77]:   HardwareClassTvCard,
	_HardwareClassName[77:90]:        HardwareClassGraphicsCard,
	_HardwareClassLowerName[77:90]:   HardwareClassGraphicsCard,
	_HardwareClassName[90:101]:       HardwareClassFramebuffer,
	_HardwareClassLowerName[90:101]:  HardwareClassFramebuffer,
	_HardwareClassName[101:107]:      HardwareClassCamera,
	_HardwareClassLowerName[101:107]: HardwareClassCamera,
	_HardwareClassName[107:112]:      HardwareClassSound,
	_HardwareClassLowerName[107:112]: HardwareClassSound,
	_HardwareClassName[112:124]:      HardwareClassStorageCtrl,
	_HardwareClassLowerName[112:124]: HardwareClassStorageCtrl,
	_HardwareClassName[124:131]:      HardwareClassNetwork,
	_HardwareClassLowerName[124:131]: HardwareClassNetwork,
	_HardwareClassName[131:143]:      HardwareClassIsdnAdapter,
	_HardwareClassLowerName[131:143]: HardwareClassIsdnAdapter,
	_HardwareClassName[143:148]:      HardwareClassModem,
	_HardwareClassLowerName[143:148]: HardwareClassModem,
	_HardwareClassName[148:165]:      HardwareClassNetworkInterface,
	_HardwareClassLowerName[148:165]: HardwareClassNetworkInterface,
	_HardwareClassName[165:169]:      HardwareClassDisk,
	_HardwareClassLowerName[165:169]: HardwareClassDisk,
	_HardwareClassName[169:178]:      HardwareClassPartition,
	_HardwareClassLowerName[169:178]: HardwareClassPartition,
	_HardwareClassName[178:183]:      HardwareClassCdrom,
	_HardwareClassLowerName[178:183]: HardwareClassCdrom,
	_HardwareClassName[183:189]:      HardwareClassFloppy,
	_HardwareClassLowerName[183:189]: HardwareClassFloppy,
	_HardwareClassName[189:195]:      HardwareClassManual,
	_HardwareClassLowerName[189:195]: HardwareClassManual,
	_HardwareClassName[195:209]:      HardwareClassUsbController,
	_HardwareClassLowerName[195:209]: HardwareClassUsbController,
	_HardwareClassName[209:212]:      HardwareClassUsb,
	_HardwareClassLowerName[209:212]: HardwareClassUsb,
	_HardwareClassName[212:216]:      HardwareClassBios,
	_HardwareClassLowerName[212:216]: HardwareClassBios,
	_HardwareClassName[216:219]:      HardwareClassPci,
	_HardwareClassLowerName[216:219]: HardwareClassPci,
	_HardwareClassName[219:225]:      HardwareClassIsapnp,
	_HardwareClassLowerName[219:225]: HardwareClassIsapnp,
	_HardwareClassName[225:231]:      HardwareClassBridge,
	_HardwareClassLowerName[225:231]: HardwareClassBridge,
	_HardwareClassName[231:234]:      HardwareClassHub,
	_HardwareClassLowerName[231:234]: HardwareClassHub,
	_HardwareClassName[234:238]:      HardwareClassScsi,
	_HardwareClassLowerName[234:238]: HardwareClassScsi,
	_HardwareClassName[238:241]:      HardwareClassIde,
	_HardwareClassLowerName[238:241]: HardwareClassIde,
	_HardwareClassName[241:247]:      HardwareClassMemory,
	_HardwareClassLowerName[241:247]: HardwareClassMemory,
	_HardwareClassName[247:255]:      HardwareClassDvbCard,
	_HardwareClassLowerName[247:255]: HardwareClassDvbCard,
	_HardwareClassName[255:261]:      HardwareClassPcmcia,
	_HardwareClassLowerName[255:261]: HardwareClassPcmcia,
	_HardwareClassName[261:278]:      HardwareClassPcmciaController,
	_HardwareClassLowerName[261:278]: HardwareClassPcmciaController,
	_HardwareClassName[278:286]:      HardwareClassFirewire,
	_HardwareClassLowerName[278:286]: HardwareClassFirewire,
	_HardwareClassName[286:305]:      HardwareClassFirewireController,
	_HardwareClassLowerName[286:305]: HardwareClassFirewireController,
	_HardwareClassName[305:312]:      HardwareClassHotplug,
	_HardwareClassLowerName[305:312]: HardwareClassHotplug,
	_HardwareClassName[312:330]:      HardwareClassHotplugController,
	_HardwareClassLowerName[312:330]: HardwareClassHotplugController,
	_HardwareClassName[330:333]:      HardwareClassZip,
	_HardwareClassLowerName[330:333]: HardwareClassZip,
	_HardwareClassName[333:338]:      HardwareClassPppoe,
	_HardwareClassLowerName[333:338]: HardwareClassPppoe,
	_HardwareClassName[338:347]:      HardwareClassWlanCard,
	_HardwareClassLowerName[338:347]: HardwareClassWlanCard,
	_HardwareClassName[347:353]:      HardwareClassRedasd,
	_HardwareClassLowerName[347:353]: HardwareClassRedasd,
	_HardwareClassName[353:364]:      HardwareClassDslAdapter,
	_HardwareClassLowerName[353:364]: HardwareClassDslAdapter,
	_HardwareClassName[364:376]:      HardwareClassBlockDevice,
	_HardwareClassLowerName[364:376]: HardwareClassBlockDevice,
	_HardwareClassName[376:380]:      HardwareClassTape,
	_HardwareClassLowerName[376:380]: HardwareClassTape,
	_HardwareClassName[380:389]:      HardwareClassVesaBios,
	_HardwareClassLowerName[380:389]: HardwareClassVesaBios,
	_HardwareClassName[389:398]:      HardwareClassBluetooth,
	_HardwareClassLowerName[389:398]: HardwareClassBluetooth,
	_HardwareClassName[398:409]:      HardwareClassFingerprint,
	_HardwareClassLowerName[398:409]: HardwareClassFingerprint,
	_HardwareClassName[409:423]:      HardwareClassMmcController,
	_HardwareClassLowerName[409:423]: HardwareClassMmcController,
	_HardwareClassName[423:427]:      HardwareClassNvme,
	_HardwareClassLowerName[423:427]: HardwareClassNvme,
	_HardwareClassName[427:434]:      HardwareClassUnknown,
	_HardwareClassLowerName[427:434]: HardwareClassUnknown,
	_HardwareClassName[434:437]:      HardwareClassAll,
	_HardwareClassLowerName[434:437]: HardwareClassAll,
}

var _HardwareClassNames = []string{
	_HardwareClassName[0:4],
	_HardwareClassName[4:10],
	_HardwareClassName[10:13],
	_HardwareClassName[13:21],
	_HardwareClassName[21:28],
	_HardwareClassName[28:33],
	_HardwareClassName[33:41],
	_HardwareClassName[41:48],
	_HardwareClassName[48:55],
	_HardwareClassName[55:63],
	_HardwareClassName[63:70],
	_HardwareClassName[70:77],
	_HardwareClassName[77:90],
	_HardwareClassName[90:101],
	_HardwareClassName[101:107],
	_HardwareClassName[107:112],
	_HardwareClassName[112:124],
	_HardwareClassName[124:131],
	_HardwareClassName[131:143],
	_HardwareClassName[143:148],
	_HardwareClassName[148:165],
	_HardwareClassName[165:169],
	_HardwareClassName[169:178],
	_HardwareClassName[178:183],
	_HardwareClassName[183:189],
	_HardwareClassName[189:195],
	_HardwareClassName[195:209],
	_HardwareClassName[209:212],
	_HardwareClassName[212:216],
	_HardwareClassName[216:219],
	_HardwareClassName[219:225],
	_HardwareClassName[225:231],
	_HardwareClassName[231:234],
	_HardwareClassName[234:238],
	_HardwareClassName[238:241],
	_HardwareClassName[241:247],
	_HardwareClassName[247:255],
	_HardwareClassName[255:261],
	_HardwareClassName[261:278],
	_HardwareClassName[278:286],
	_HardwareClassName[286:305],
	_HardwareClassName[305:312],
	_HardwareClassName[312:330],
	_HardwareClassName[330:333],
	_HardwareClassName[333:338],
	_HardwareClassName[338:347],
	_HardwareClassName[347:353],
	_HardwareClassName[353:364],
	_HardwareClassName[364:376],
	_HardwareClassName[376:380],
	_HardwareClassName[380:389],
	_HardwareClassName[389:398],
	_HardwareClassName[398:409],
	_HardwareClassName[409:423],
	_HardwareClassName[423:427],
	_HardwareClassName[427:434],
	_HardwareClassName[434:437],
}

// HardwareClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HardwareClassString(s string) (HardwareClass, error) {
	if val, ok := _HardwareClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HardwareClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HardwareClass values", s)
}

// HardwareClassValues returns all values of the enum
func HardwareClassValues() []HardwareClass {
	return _HardwareClassValues
}

// HardwareClassStrings returns a slice of all String values of the enum
func HardwareClassStrings() []string {
	strs := make([]string, len(_HardwareClassNames))
	copy(strs, _HardwareClassNames)
	return strs
}

// IsAHardwareClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HardwareClass) IsAHardwareClass() bool {
	for _, v := range _HardwareClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HardwareClass
func (i HardwareClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HardwareClass
func (i *HardwareClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HardwareClass should be a string, got %s", data)
	}

	var err error
	*i, err = HardwareClassString(s)
	return err
}
