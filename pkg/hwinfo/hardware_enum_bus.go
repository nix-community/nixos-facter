// Code generated by "enumer -type=Bus -json -transform=snake -trimprefix Bus -output=./hardware_enum_bus.go"; DO NOT EDIT.

package hwinfo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_BusName_0      = "noneisaeisamcpcipcmcianubuscardbusother"
	_BusLowerName_0 = "noneisaeisamcpcipcmcianubuscardbusother"
	_BusName_1      = "ps2serialparallelfloppyscsiideusbadbraidsbusi2ovioccwiucvps3_system_busvirtioibmebusgameportuisvirtpcimmcsdiondnvme"
	_BusLowerName_1 = "ps2serialparallelfloppyscsiideusbadbraidsbusi2ovioccwiucvps3_system_busvirtioibmebusgameportuisvirtpcimmcsdiondnvme"
)

var (
	_BusIndex_0 = [...]uint8{0, 4, 7, 11, 13, 16, 22, 27, 34, 39}
	_BusIndex_1 = [...]uint8{0, 3, 9, 17, 23, 27, 30, 33, 36, 40, 44, 47, 50, 53, 57, 71, 77, 84, 92, 102, 105, 109, 111, 115}
)

func (i Bus) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _BusName_0[_BusIndex_0[i]:_BusIndex_0[i+1]]
	case 128 <= i && i <= 150:
		i -= 128
		return _BusName_1[_BusIndex_1[i]:_BusIndex_1[i+1]]
	default:
		return fmt.Sprintf("Bus(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BusNoOp() {
	var x [1]struct{}
	_ = x[BusNone-(0)]
	_ = x[BusIsa-(1)]
	_ = x[BusEisa-(2)]
	_ = x[BusMc-(3)]
	_ = x[BusPci-(4)]
	_ = x[BusPcmcia-(5)]
	_ = x[BusNubus-(6)]
	_ = x[BusCardbus-(7)]
	_ = x[BusOther-(8)]
	_ = x[BusPs2-(128)]
	_ = x[BusSerial-(129)]
	_ = x[BusParallel-(130)]
	_ = x[BusFloppy-(131)]
	_ = x[BusScsi-(132)]
	_ = x[BusIde-(133)]
	_ = x[BusUsb-(134)]
	_ = x[BusAdb-(135)]
	_ = x[BusRaid-(136)]
	_ = x[BusSbus-(137)]
	_ = x[BusI2o-(138)]
	_ = x[BusVio-(139)]
	_ = x[BusCcw-(140)]
	_ = x[BusIucv-(141)]
	_ = x[BusPs3SystemBus-(142)]
	_ = x[BusVirtio-(143)]
	_ = x[BusIbmebus-(144)]
	_ = x[BusGameport-(145)]
	_ = x[BusUisvirtpci-(146)]
	_ = x[BusMmc-(147)]
	_ = x[BusSdio-(148)]
	_ = x[BusNd-(149)]
	_ = x[BusNvme-(150)]
}

var _BusValues = []Bus{BusNone, BusIsa, BusEisa, BusMc, BusPci, BusPcmcia, BusNubus, BusCardbus, BusOther, BusPs2, BusSerial, BusParallel, BusFloppy, BusScsi, BusIde, BusUsb, BusAdb, BusRaid, BusSbus, BusI2o, BusVio, BusCcw, BusIucv, BusPs3SystemBus, BusVirtio, BusIbmebus, BusGameport, BusUisvirtpci, BusMmc, BusSdio, BusNd, BusNvme}

var _BusNameToValueMap = map[string]Bus{
	_BusName_0[0:4]:          BusNone,
	_BusLowerName_0[0:4]:     BusNone,
	_BusName_0[4:7]:          BusIsa,
	_BusLowerName_0[4:7]:     BusIsa,
	_BusName_0[7:11]:         BusEisa,
	_BusLowerName_0[7:11]:    BusEisa,
	_BusName_0[11:13]:        BusMc,
	_BusLowerName_0[11:13]:   BusMc,
	_BusName_0[13:16]:        BusPci,
	_BusLowerName_0[13:16]:   BusPci,
	_BusName_0[16:22]:        BusPcmcia,
	_BusLowerName_0[16:22]:   BusPcmcia,
	_BusName_0[22:27]:        BusNubus,
	_BusLowerName_0[22:27]:   BusNubus,
	_BusName_0[27:34]:        BusCardbus,
	_BusLowerName_0[27:34]:   BusCardbus,
	_BusName_0[34:39]:        BusOther,
	_BusLowerName_0[34:39]:   BusOther,
	_BusName_1[0:3]:          BusPs2,
	_BusLowerName_1[0:3]:     BusPs2,
	_BusName_1[3:9]:          BusSerial,
	_BusLowerName_1[3:9]:     BusSerial,
	_BusName_1[9:17]:         BusParallel,
	_BusLowerName_1[9:17]:    BusParallel,
	_BusName_1[17:23]:        BusFloppy,
	_BusLowerName_1[17:23]:   BusFloppy,
	_BusName_1[23:27]:        BusScsi,
	_BusLowerName_1[23:27]:   BusScsi,
	_BusName_1[27:30]:        BusIde,
	_BusLowerName_1[27:30]:   BusIde,
	_BusName_1[30:33]:        BusUsb,
	_BusLowerName_1[30:33]:   BusUsb,
	_BusName_1[33:36]:        BusAdb,
	_BusLowerName_1[33:36]:   BusAdb,
	_BusName_1[36:40]:        BusRaid,
	_BusLowerName_1[36:40]:   BusRaid,
	_BusName_1[40:44]:        BusSbus,
	_BusLowerName_1[40:44]:   BusSbus,
	_BusName_1[44:47]:        BusI2o,
	_BusLowerName_1[44:47]:   BusI2o,
	_BusName_1[47:50]:        BusVio,
	_BusLowerName_1[47:50]:   BusVio,
	_BusName_1[50:53]:        BusCcw,
	_BusLowerName_1[50:53]:   BusCcw,
	_BusName_1[53:57]:        BusIucv,
	_BusLowerName_1[53:57]:   BusIucv,
	_BusName_1[57:71]:        BusPs3SystemBus,
	_BusLowerName_1[57:71]:   BusPs3SystemBus,
	_BusName_1[71:77]:        BusVirtio,
	_BusLowerName_1[71:77]:   BusVirtio,
	_BusName_1[77:84]:        BusIbmebus,
	_BusLowerName_1[77:84]:   BusIbmebus,
	_BusName_1[84:92]:        BusGameport,
	_BusLowerName_1[84:92]:   BusGameport,
	_BusName_1[92:102]:       BusUisvirtpci,
	_BusLowerName_1[92:102]:  BusUisvirtpci,
	_BusName_1[102:105]:      BusMmc,
	_BusLowerName_1[102:105]: BusMmc,
	_BusName_1[105:109]:      BusSdio,
	_BusLowerName_1[105:109]: BusSdio,
	_BusName_1[109:111]:      BusNd,
	_BusLowerName_1[109:111]: BusNd,
	_BusName_1[111:115]:      BusNvme,
	_BusLowerName_1[111:115]: BusNvme,
}

var _BusNames = []string{
	_BusName_0[0:4],
	_BusName_0[4:7],
	_BusName_0[7:11],
	_BusName_0[11:13],
	_BusName_0[13:16],
	_BusName_0[16:22],
	_BusName_0[22:27],
	_BusName_0[27:34],
	_BusName_0[34:39],
	_BusName_1[0:3],
	_BusName_1[3:9],
	_BusName_1[9:17],
	_BusName_1[17:23],
	_BusName_1[23:27],
	_BusName_1[27:30],
	_BusName_1[30:33],
	_BusName_1[33:36],
	_BusName_1[36:40],
	_BusName_1[40:44],
	_BusName_1[44:47],
	_BusName_1[47:50],
	_BusName_1[50:53],
	_BusName_1[53:57],
	_BusName_1[57:71],
	_BusName_1[71:77],
	_BusName_1[77:84],
	_BusName_1[84:92],
	_BusName_1[92:102],
	_BusName_1[102:105],
	_BusName_1[105:109],
	_BusName_1[109:111],
	_BusName_1[111:115],
}

// BusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BusString(s string) (Bus, error) {
	if val, ok := _BusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bus values", s)
}

// BusValues returns all values of the enum
func BusValues() []Bus {
	return _BusValues
}

// BusStrings returns a slice of all String values of the enum
func BusStrings() []string {
	strs := make([]string, len(_BusNames))
	copy(strs, _BusNames)
	return strs
}

// IsABus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bus) IsABus() bool {
	for _, v := range _BusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Bus
func (i Bus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Bus
func (i *Bus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Bus should be a string, got %s", data)
	}

	var err error
	*i, err = BusString(s)
	return err
}
