// Code generated by "enumer -type=Bus -json -text -transform=snake -trimprefix Bus -output=./udev_bus.go"; DO NOT EDIT.

package udev

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BusName = "atabluetoothi8042i2cieee1394pcipci_expresspcmciaplatformscsiserialseriospiusbvirtio"

var _BusIndex = [...]uint8{0, 3, 12, 17, 20, 28, 31, 42, 48, 56, 60, 66, 71, 74, 77, 83}

const _BusLowerName = "atabluetoothi8042i2cieee1394pcipci_expresspcmciaplatformscsiserialseriospiusbvirtio"

func (i Bus) String() string {
	if i < 0 || i >= Bus(len(_BusIndex)-1) {
		return fmt.Sprintf("Bus(%d)", i)
	}
	return _BusName[_BusIndex[i]:_BusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BusNoOp() {
	var x [1]struct{}
	_ = x[BusAta-(0)]
	_ = x[BusBluetooth-(1)]
	_ = x[BusI8042-(2)]
	_ = x[BusI2c-(3)]
	_ = x[BusIeee1394-(4)]
	_ = x[BusPci-(5)]
	_ = x[BusPciExpress-(6)]
	_ = x[BusPcmcia-(7)]
	_ = x[BusPlatform-(8)]
	_ = x[BusScsi-(9)]
	_ = x[BusSerial-(10)]
	_ = x[BusSerio-(11)]
	_ = x[BusSpi-(12)]
	_ = x[BusUsb-(13)]
	_ = x[BusVirtio-(14)]
}

var _BusValues = []Bus{BusAta, BusBluetooth, BusI8042, BusI2c, BusIeee1394, BusPci, BusPciExpress, BusPcmcia, BusPlatform, BusScsi, BusSerial, BusSerio, BusSpi, BusUsb, BusVirtio}

var _BusNameToValueMap = map[string]Bus{
	_BusName[0:3]:        BusAta,
	_BusLowerName[0:3]:   BusAta,
	_BusName[3:12]:       BusBluetooth,
	_BusLowerName[3:12]:  BusBluetooth,
	_BusName[12:17]:      BusI8042,
	_BusLowerName[12:17]: BusI8042,
	_BusName[17:20]:      BusI2c,
	_BusLowerName[17:20]: BusI2c,
	_BusName[20:28]:      BusIeee1394,
	_BusLowerName[20:28]: BusIeee1394,
	_BusName[28:31]:      BusPci,
	_BusLowerName[28:31]: BusPci,
	_BusName[31:42]:      BusPciExpress,
	_BusLowerName[31:42]: BusPciExpress,
	_BusName[42:48]:      BusPcmcia,
	_BusLowerName[42:48]: BusPcmcia,
	_BusName[48:56]:      BusPlatform,
	_BusLowerName[48:56]: BusPlatform,
	_BusName[56:60]:      BusScsi,
	_BusLowerName[56:60]: BusScsi,
	_BusName[60:66]:      BusSerial,
	_BusLowerName[60:66]: BusSerial,
	_BusName[66:71]:      BusSerio,
	_BusLowerName[66:71]: BusSerio,
	_BusName[71:74]:      BusSpi,
	_BusLowerName[71:74]: BusSpi,
	_BusName[74:77]:      BusUsb,
	_BusLowerName[74:77]: BusUsb,
	_BusName[77:83]:      BusVirtio,
	_BusLowerName[77:83]: BusVirtio,
}

var _BusNames = []string{
	_BusName[0:3],
	_BusName[3:12],
	_BusName[12:17],
	_BusName[17:20],
	_BusName[20:28],
	_BusName[28:31],
	_BusName[31:42],
	_BusName[42:48],
	_BusName[48:56],
	_BusName[56:60],
	_BusName[60:66],
	_BusName[66:71],
	_BusName[71:74],
	_BusName[74:77],
	_BusName[77:83],
}

// BusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BusString(s string) (Bus, error) {
	if val, ok := _BusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bus values", s)
}

// BusValues returns all values of the enum
func BusValues() []Bus {
	return _BusValues
}

// BusStrings returns a slice of all String values of the enum
func BusStrings() []string {
	strs := make([]string, len(_BusNames))
	copy(strs, _BusNames)
	return strs
}

// IsABus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bus) IsABus() bool {
	for _, v := range _BusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Bus
func (i Bus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Bus
func (i *Bus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Bus should be a string, got %s", data)
	}

	var err error
	*i, err = BusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Bus
func (i Bus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Bus
func (i *Bus) UnmarshalText(text []byte) error {
	var err error
	*i, err = BusString(string(text))
	return err
}
