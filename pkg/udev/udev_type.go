// Code generated by "enumer -type=Type -json -text -trimprefix Type -output=./udev_type.go"; DO NOT EDIT.

package udev

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "DiskCDFloppyTapePartitionUsbScsiPciNetworkMouseKeyboardPrinterAudioVideoGeneric"

var _TypeIndex = [...]uint8{0, 4, 6, 12, 16, 25, 28, 32, 35, 42, 47, 55, 62, 67, 72, 79}

const _TypeLowerName = "diskcdfloppytapepartitionusbscsipcinetworkmousekeyboardprinteraudiovideogeneric"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[TypeDisk-(0)]
	_ = x[TypeCD-(1)]
	_ = x[TypeFloppy-(2)]
	_ = x[TypeTape-(3)]
	_ = x[TypePartition-(4)]
	_ = x[TypeUsb-(5)]
	_ = x[TypeScsi-(6)]
	_ = x[TypePci-(7)]
	_ = x[TypeNetwork-(8)]
	_ = x[TypeMouse-(9)]
	_ = x[TypeKeyboard-(10)]
	_ = x[TypePrinter-(11)]
	_ = x[TypeAudio-(12)]
	_ = x[TypeVideo-(13)]
	_ = x[TypeGeneric-(14)]
}

var _TypeValues = []Type{TypeDisk, TypeCD, TypeFloppy, TypeTape, TypePartition, TypeUsb, TypeScsi, TypePci, TypeNetwork, TypeMouse, TypeKeyboard, TypePrinter, TypeAudio, TypeVideo, TypeGeneric}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:4]:        TypeDisk,
	_TypeLowerName[0:4]:   TypeDisk,
	_TypeName[4:6]:        TypeCD,
	_TypeLowerName[4:6]:   TypeCD,
	_TypeName[6:12]:       TypeFloppy,
	_TypeLowerName[6:12]:  TypeFloppy,
	_TypeName[12:16]:      TypeTape,
	_TypeLowerName[12:16]: TypeTape,
	_TypeName[16:25]:      TypePartition,
	_TypeLowerName[16:25]: TypePartition,
	_TypeName[25:28]:      TypeUsb,
	_TypeLowerName[25:28]: TypeUsb,
	_TypeName[28:32]:      TypeScsi,
	_TypeLowerName[28:32]: TypeScsi,
	_TypeName[32:35]:      TypePci,
	_TypeLowerName[32:35]: TypePci,
	_TypeName[35:42]:      TypeNetwork,
	_TypeLowerName[35:42]: TypeNetwork,
	_TypeName[42:47]:      TypeMouse,
	_TypeLowerName[42:47]: TypeMouse,
	_TypeName[47:55]:      TypeKeyboard,
	_TypeLowerName[47:55]: TypeKeyboard,
	_TypeName[55:62]:      TypePrinter,
	_TypeLowerName[55:62]: TypePrinter,
	_TypeName[62:67]:      TypeAudio,
	_TypeLowerName[62:67]: TypeAudio,
	_TypeName[67:72]:      TypeVideo,
	_TypeLowerName[67:72]: TypeVideo,
	_TypeName[72:79]:      TypeGeneric,
	_TypeLowerName[72:79]: TypeGeneric,
}

var _TypeNames = []string{
	_TypeName[0:4],
	_TypeName[4:6],
	_TypeName[6:12],
	_TypeName[12:16],
	_TypeName[16:25],
	_TypeName[25:28],
	_TypeName[28:32],
	_TypeName[32:35],
	_TypeName[35:42],
	_TypeName[42:47],
	_TypeName[47:55],
	_TypeName[55:62],
	_TypeName[62:67],
	_TypeName[67:72],
	_TypeName[72:79],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Type
func (i Type) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Type
func (i *Type) UnmarshalText(text []byte) error {
	var err error
	*i, err = TypeString(string(text))
	return err
}
