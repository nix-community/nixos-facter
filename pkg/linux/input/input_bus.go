// Code generated by "enumer -type=Bus -json -text -trimprefix Bus -output=./input_bus.go"; DO NOT EDIT.

package input

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_BusName_0      = "PciIsapnpUsbHilBluetoothVirtual"
	_BusLowerName_0 = "pciisapnpusbhilbluetoothvirtual"
	_BusName_1      = "IsaI8042XtkbdRs232GameportParportAmigaAdbI2cHostGscAtariSpiRmiCecIntelIshtpAmdSfh"
	_BusLowerName_1 = "isai8042xtkbdrs232gameportparportamigaadbi2chostgscatarispirmicecintelishtpamdsfh"
)

var (
	_BusIndex_0 = [...]uint8{0, 3, 9, 12, 15, 24, 31}
	_BusIndex_1 = [...]uint8{0, 3, 8, 13, 18, 26, 33, 38, 41, 44, 48, 51, 56, 59, 62, 65, 75, 81}
)

func (i Bus) String() string {
	switch {
	case 1 <= i && i <= 6:
		i -= 1
		return _BusName_0[_BusIndex_0[i]:_BusIndex_0[i+1]]
	case 16 <= i && i <= 32:
		i -= 16
		return _BusName_1[_BusIndex_1[i]:_BusIndex_1[i+1]]
	default:
		return fmt.Sprintf("Bus(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BusNoOp() {
	var x [1]struct{}
	_ = x[BusPci-(1)]
	_ = x[BusIsapnp-(2)]
	_ = x[BusUsb-(3)]
	_ = x[BusHil-(4)]
	_ = x[BusBluetooth-(5)]
	_ = x[BusVirtual-(6)]
	_ = x[BusIsa-(16)]
	_ = x[BusI8042-(17)]
	_ = x[BusXtkbd-(18)]
	_ = x[BusRs232-(19)]
	_ = x[BusGameport-(20)]
	_ = x[BusParport-(21)]
	_ = x[BusAmiga-(22)]
	_ = x[BusAdb-(23)]
	_ = x[BusI2c-(24)]
	_ = x[BusHost-(25)]
	_ = x[BusGsc-(26)]
	_ = x[BusAtari-(27)]
	_ = x[BusSpi-(28)]
	_ = x[BusRmi-(29)]
	_ = x[BusCec-(30)]
	_ = x[BusIntelIshtp-(31)]
	_ = x[BusAmdSfh-(32)]
}

var _BusValues = []Bus{BusPci, BusIsapnp, BusUsb, BusHil, BusBluetooth, BusVirtual, BusIsa, BusI8042, BusXtkbd, BusRs232, BusGameport, BusParport, BusAmiga, BusAdb, BusI2c, BusHost, BusGsc, BusAtari, BusSpi, BusRmi, BusCec, BusIntelIshtp, BusAmdSfh}

var _BusNameToValueMap = map[string]Bus{
	_BusName_0[0:3]:        BusPci,
	_BusLowerName_0[0:3]:   BusPci,
	_BusName_0[3:9]:        BusIsapnp,
	_BusLowerName_0[3:9]:   BusIsapnp,
	_BusName_0[9:12]:       BusUsb,
	_BusLowerName_0[9:12]:  BusUsb,
	_BusName_0[12:15]:      BusHil,
	_BusLowerName_0[12:15]: BusHil,
	_BusName_0[15:24]:      BusBluetooth,
	_BusLowerName_0[15:24]: BusBluetooth,
	_BusName_0[24:31]:      BusVirtual,
	_BusLowerName_0[24:31]: BusVirtual,
	_BusName_1[0:3]:        BusIsa,
	_BusLowerName_1[0:3]:   BusIsa,
	_BusName_1[3:8]:        BusI8042,
	_BusLowerName_1[3:8]:   BusI8042,
	_BusName_1[8:13]:       BusXtkbd,
	_BusLowerName_1[8:13]:  BusXtkbd,
	_BusName_1[13:18]:      BusRs232,
	_BusLowerName_1[13:18]: BusRs232,
	_BusName_1[18:26]:      BusGameport,
	_BusLowerName_1[18:26]: BusGameport,
	_BusName_1[26:33]:      BusParport,
	_BusLowerName_1[26:33]: BusParport,
	_BusName_1[33:38]:      BusAmiga,
	_BusLowerName_1[33:38]: BusAmiga,
	_BusName_1[38:41]:      BusAdb,
	_BusLowerName_1[38:41]: BusAdb,
	_BusName_1[41:44]:      BusI2c,
	_BusLowerName_1[41:44]: BusI2c,
	_BusName_1[44:48]:      BusHost,
	_BusLowerName_1[44:48]: BusHost,
	_BusName_1[48:51]:      BusGsc,
	_BusLowerName_1[48:51]: BusGsc,
	_BusName_1[51:56]:      BusAtari,
	_BusLowerName_1[51:56]: BusAtari,
	_BusName_1[56:59]:      BusSpi,
	_BusLowerName_1[56:59]: BusSpi,
	_BusName_1[59:62]:      BusRmi,
	_BusLowerName_1[59:62]: BusRmi,
	_BusName_1[62:65]:      BusCec,
	_BusLowerName_1[62:65]: BusCec,
	_BusName_1[65:75]:      BusIntelIshtp,
	_BusLowerName_1[65:75]: BusIntelIshtp,
	_BusName_1[75:81]:      BusAmdSfh,
	_BusLowerName_1[75:81]: BusAmdSfh,
}

var _BusNames = []string{
	_BusName_0[0:3],
	_BusName_0[3:9],
	_BusName_0[9:12],
	_BusName_0[12:15],
	_BusName_0[15:24],
	_BusName_0[24:31],
	_BusName_1[0:3],
	_BusName_1[3:8],
	_BusName_1[8:13],
	_BusName_1[13:18],
	_BusName_1[18:26],
	_BusName_1[26:33],
	_BusName_1[33:38],
	_BusName_1[38:41],
	_BusName_1[41:44],
	_BusName_1[44:48],
	_BusName_1[48:51],
	_BusName_1[51:56],
	_BusName_1[56:59],
	_BusName_1[59:62],
	_BusName_1[62:65],
	_BusName_1[65:75],
	_BusName_1[75:81],
}

// BusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BusString(s string) (Bus, error) {
	if val, ok := _BusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Bus values", s)
}

// BusValues returns all values of the enum
func BusValues() []Bus {
	return _BusValues
}

// BusStrings returns a slice of all String values of the enum
func BusStrings() []string {
	strs := make([]string, len(_BusNames))
	copy(strs, _BusNames)
	return strs
}

// IsABus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Bus) IsABus() bool {
	for _, v := range _BusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Bus
func (i Bus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Bus
func (i *Bus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Bus should be a string, got %s", data)
	}

	var err error
	*i, err = BusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Bus
func (i Bus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Bus
func (i *Bus) UnmarshalText(text []byte) error {
	var err error
	*i, err = BusString(string(text))
	return err
}
